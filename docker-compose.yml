version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: synthdata-postgres
    environment:
      POSTGRES_USER: synthdata
      POSTGRES_PASSWORD: synthdata123
      POSTGRES_DB: synthdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - synthdata-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U synthdata"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: synthdata-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - synthdata-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: synthdata-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://synthdata:synthdata123@postgres:5432/synthdata
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: your-secret-key-change-in-production
      DEBUG: "False"
      MODEL_CACHE_DIR: /app/models_cache
    volumes:
      - ./backend/app:/app/app
      - models_cache:/app/models_cache
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - synthdata-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: synthdata-frontend
    environment:
      VITE_API_URL: http://localhost:8000/api/v1
      VITE_WS_URL: ws://localhost:8000/ws
    volumes:
      - ./frontend/src:/app/src
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - synthdata-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: synthdata-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - synthdata-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  models_cache:

networks:
  synthdata-network:
    driver: bridge